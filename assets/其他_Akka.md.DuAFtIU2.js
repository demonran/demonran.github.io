import{_ as a,c as e,o as t,a1 as o}from"./chunks/framework.rLRl8Q3O.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/Akka.md","filePath":"其他/Akka.md","lastUpdated":1717488754000}'),r={name:"其他/Akka.md"},c=o(`<h4 id="akka基本架构体系及周边产品" tabindex="-1">Akka基本架构体系及周边产品 <a class="header-anchor" href="#akka基本架构体系及周边产品" aria-label="Permalink to &quot;Akka基本架构体系及周边产品&quot;">​</a></h4><pre><code> 
</code></pre><h5 id="actor组件" tabindex="-1">Actor组件 <a class="header-anchor" href="#actor组件" aria-label="Permalink to &quot;Actor组件&quot;">​</a></h5><pre><code>在Akka中，Actor是一个高度抽象的对象引用，它包含以下几个要素：   
</code></pre><p>引用(ActorReference)  Actor的引用不同于普通对象的引用能通过传统的“new”的方式直接创建一个Actor对象。很多时候需actorOf或者actorSelection等方式返回一个ActorRef对象，有可能存在于本地，也可能存在于远程节点，对我们来说，它是位的。Actor之间的通信和执行任务都是通过消息驱动的（而不是AP用）。 状态(State)  Actor在不同时刻可能有着不同的状态，这些状态来表示。在底层实现上，Actor是运行于线程池之上的，肯定会存Actor共享同一个线程的情况，那么会不会出现并发问题呢？实Akka为每个Actor都抽象出一个轻量级的执行“线程”（不是程），在底层已经实现了隔离性，所以基本上不用担心该问题的出现。 另外，当JVM崩溃时，为了避免Actor状态的丢失，我们可以借助方案来对状态进行持久化操作。 行为(Behavior)  Actor都有接收和发送消息的能力，每当它接个消息后，就可以执行某个业务操作，同时也可以把消息转发到其进行处理。 监管策略(SupervisorStrategy)  Actor系统是一个层级结构务被某个Actor分摊到子Actor时，父Actor就拥有监管子Acto务。在监管时，我们需要根据不同的情况选择不同的处理方案（止、重启、恢复或者失败上溯）和策略（比如1 vs 1、1 vs N策略）。</p><pre><code> 
</code></pre><h5 id="邮箱-mailbox" tabindex="-1">邮箱  (Mailbox) <a class="header-anchor" href="#邮箱-mailbox" aria-label="Permalink to &quot;邮箱  (Mailbox)&quot;">​</a></h5><p>每个Actor都有自己的邮箱，所有其他Actor发送过来的消息都会进入该邮箱Akka 自带多种邮箱类型，也提供自定义邮箱的接口。</p><h5 id="路由-routing" tabindex="-1">路由 (Routing) <a class="header-anchor" href="#路由-routing" aria-label="Permalink to &quot;路由 (Routing)&quot;">​</a></h5><p>消息除了通过普通的Actor发送之外，也可以通过路由进行发送。当通过路由发送消息时，我们可以根据需求来选择不同的路由策略，比如轮询、广播等。</p><h5 id="持久化-persistence" tabindex="-1">持久化 (Persistence) <a class="header-anchor" href="#持久化-persistence" aria-label="Permalink to &quot;持久化 (Persistence)&quot;">​</a></h5><p>任何程序都可能有失败的可能，即便是JVM如此强大稳定的平台也都一样。当程 出错， JVM崩溃时，任何关键状态的丢失，对我们后续的业务来讲都可能是致命打击，所以状态数据的持久化变得非常重要。Akka提供了Actor状态的持久化案， 以便我们在必要时恢复数据。</p><h5 id="网络-远程和分布式集群" tabindex="-1">网络（远程和分布式集群） <a class="header-anchor" href="#网络-远程和分布式集群" aria-label="Permalink to &quot;网络（远程和分布式集群）&quot;">​</a></h5><p>网络功能是实现远程Actor和分布式集群的基础，这其中包含I/O、网络通（TCPUDP）、序列化配置、分布式通信协议(Gossip)、节点(node)管理、集群分片等容。</p><h5 id="http-模块" tabindex="-1">HTTP 模块 <a class="header-anchor" href="#http-模块" aria-label="Permalink to &quot;HTTP 模块&quot;">​</a></h5><p>Akka提供了简单易用的Http模块，支持完整的Http服务端与客户端开发，可以帮助我们快速构建性能极强的Rest Web服务。      相关开源项目 Akka具有高性能、可扩展、设计友好等诸多优点，非常被适合用来作为分布式应 的基础框架，而且由于对Http有非常好的支持，也让它在web服务领域占有一席地。目前业界已经有多个基于Akka实现的开源项目，项目类型涵盖了Web开发、服 务、分布式文件或计算服务等。下面是Akka中两个具有代表性的开源项目：</p><h5 id="play框架" tabindex="-1">Play框架 <a class="header-anchor" href="#play框架" aria-label="Permalink to &quot;Play框架&quot;">​</a></h5><p>一款大名鼎鼎的Web开发框架。它不同于其他Servlet系的框架，比如Stru或者SpringMVC，底层基于Akka构建，天生拥有异步的特点，具有极佳能。 它默认提供restful风格的API，同时也对WebSocket有不错的支持。</p><h5 id="lagom框架" tabindex="-1">Lagom框架 <a class="header-anchor" href="#lagom框架" aria-label="Permalink to &quot;Lagom框架&quot;">​</a></h5><p>在目前IT界，最火爆的概念要属&quot;微服务&quot;了，微服务的理念是：把业务功能 拆成的、独立的单元，他们之间能够互相通信而且支持水平扩展。Lagom 就是这样一微服务框架，它基于异步的消息驱动，对分布式集群、持久化（如  JPA、NoSql都有良好的支持。同时，它也拥有完整的集成开发环境，非常 便于在线部署和理。</p>`,20),i=[c];function n(l,s,h,d,k,p){return t(),e("div",null,i)}const b=a(r,[["render",n]]);export{u as __pageData,b as default};
