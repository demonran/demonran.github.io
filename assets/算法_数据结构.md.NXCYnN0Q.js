import{_ as s,c as a,o as n,a1 as l}from"./chunks/framework.rLRl8Q3O.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"算法/数据结构.md","filePath":"算法/数据结构.md","lastUpdated":1720510408000}'),i={name:"算法/数据结构.md"},e=l(`<ul><li><p>数据结构</p><ul><li>逻辑结构 <ul><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ul></li><li>物理结构 <ul><li>顺序存储结构</li><li>链式存储结构</li></ul></li></ul></li><li><p>算法</p><ul><li>排序算法 <ul><li>冒泡排序 ：两次循环</li><li>插入排序</li><li>归并排序</li><li>快速排序： 基准数， 小的往左，大的往右</li></ul></li></ul></li></ul><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>#####1. 数组中的最长山脉 ######方法一： 枚举山顶， 两边相加，找最长的山脉</p><ol><li>使用left[i]表示上破的长度， right[i]表示下坡的长度</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>arr[i - 1] &lt; arr[i] ? left[i]=left[i-1] +1</span></span>
<span class="line"><span>arr[i] &gt; arr[i + 1] ? right[i] = right[i+1] + 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>找顶点 left[i] &gt;0 &amp;&amp; right[i]&gt;0</li><li>相加 ans = left[i] + right[i]</li></ol><h6 id="方法二-枚举山脚-定位左侧山脚-往右移动找到右侧山脚-找到最长山脉" tabindex="-1">方法二： 枚举山脚， 定位左侧山脚，往右移动找到右侧山脚，找到最长山脉 <a class="header-anchor" href="#方法二-枚举山脚-定位左侧山脚-往右移动找到右侧山脚-找到最长山脉" aria-label="Permalink to &quot;方法二： 枚举山脚， 定位左侧山脚，往右移动找到右侧山脚，找到最长山脉&quot;">​</a></h6><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 初始化</span></span>
<span class="line"><span>left = 0, right=left + 1, ans = 0</span></span>
<span class="line"><span># 先经过顶点</span></span>
<span class="line"><span>arr[right] &lt;  arr[right +1]</span></span>
<span class="line"><span># 在找右边山脚</span></span>
<span class="line"><span>arr[right] &gt; arr[right +1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在找下一个山脉</span></span>
<span class="line"><span>left = right</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 山脉长度</span></span>
<span class="line"><span>ans = max(ans , right - left + 1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,8),p=[e];function r(t,c,u,o,b,d){return n(),a("div",null,p)}const _=s(i,[["render",r]]);export{m as __pageData,_ as default};
