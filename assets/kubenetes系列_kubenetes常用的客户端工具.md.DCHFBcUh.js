import{_ as e,c as s,o as a,a1 as i}from"./chunks/framework.rLRl8Q3O.js";const l="/assets/k9s_image1.D9yWSAtH.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kubenetes系列/kubenetes常用的客户端工具.md","filePath":"kubenetes系列/kubenetes常用的客户端工具.md","lastUpdated":1717488754000}'),t={name:"kubenetes系列/kubenetes常用的客户端工具.md"},n=i('<h2 id="客户端工具" tabindex="-1">客户端工具 <a class="header-anchor" href="#客户端工具" aria-label="Permalink to &quot;客户端工具&quot;">​</a></h2><p>本文主要讲一下我这些年用的一些k8s的工具，以及使用的一些感受。</p><h3 id="kubectl" tabindex="-1">kubectl <a class="header-anchor" href="#kubectl" aria-label="Permalink to &quot;kubectl&quot;">​</a></h3><p>k8s默认的管理工具还是kubectl， 其他很多工具的实现都是基于kubectl的基础上实现的。</p><h4 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h4><ol><li>kubectl默认读取～/.kube/config的配置， 所以客户端需要copy k8s集群的配置到本地，并放到～/kube/config中， <strong>注意： 每个用户需要单独放一个配置文件</strong></li></ol><h4 id="别名" tabindex="-1">别名 <a class="header-anchor" href="#别名" aria-label="Permalink to &quot;别名&quot;">​</a></h4><ol><li>每次都输入kubectl 命令显的很臃肿， 可以.bashrc/ .zshrc中配置别名 <code>alias k=kubectl</code></li><li>如果有多个集群需要管理，也可以使用别名来解决： 将集群配置放置在任意位置， 我这里放在 ～/.kube/config_club 然后配置别名<code>alias kc=kubectl --kubeconfig=~/.kube/config_club</code></li></ol><h4 id="常用的命令" tabindex="-1">常用的命令 <a class="header-anchor" href="#常用的命令" aria-label="Permalink to &quot;常用的命令&quot;">​</a></h4><ul><li><code>k get pod</code>: 查询pod，默认是default命名空间，可以通过-n <code>&lt;namespce&gt;</code>指定命- 名空间</li><li><code>k get pod -A</code>: 查询所有空间的pod</li><li><code>k get pod -o wide</code>: 查询pod并且带有node信息</li><li><code>k get deploy</code>: 查询deployment</li><li><code>k get svc</code>: 查询service</li><li><code>k get ingress</code>: 查询ingerss</li><li><code>k get cm </code> 查询配置列表</li><li><code>k get cm config1 -oyaml</code>: 使用yaml格式查询config1 , <code>- ojson</code> 使用json格式</li><li><code>k edit cm config1 -oyaml</code> : 编辑congfig1，保存后会自动生效。</li><li><code>k describe pod &lt;pod name&gt;</code>: 查看pod描述，pod启动出错时查看错误信息。</li><li><code>k logs &lt;pod name&gt;</code>: 查看pod日志， pod启动后可以查看。 加上<code>-f</code>后可以监听日志变化并实时输出。</li><li><code>k exec -it &lt;pod name&gt; -- bash</code>: 进入pod容器中，用来查看pod容器的一些文件信息。有些镜像比较精简，没有bash工具，可以尝试用sh。</li><li><code>k cp &lt;namespace&gt;/&lt;pod name&gt;:/etc/resolv.conf ./resolv.conf</code>: 将文件从pod中拷贝到本地，解决一些pod中没有bash和sh， 无法查看pod内的文件临时验证- 的问题。</li><li><code>k scale --replicas=1 deploy &lt;deployment&gt;</code>: 动态扩容/缩小deployment。</li><li><code>kubectl create secret docker-registry docker-registry --docker-server=&lt;server&gt; --docker-username=&lt;username&gt; --docker-password=&lt;password&gt;</code>: 创建docker-registry secret</li><li><code>k api-resources</code>: 查看所有k8s的资源列表</li></ul><h3 id="k9s" tabindex="-1">k9s <a class="header-anchor" href="#k9s" aria-label="Permalink to &quot;k9s&quot;">​</a></h3><p>k9s是一个k8s客户端cli工具，可以在命令行视图来查看k8s的pod运行情况</p><ol><li>查看pod运行情况</li><li>查看日志，执行tail, head，固定时间刷新等</li><li>支持快速进入pod执行shell</li><li>支持pod端口转发</li><li>支持编辑yaml</li></ol><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><p>mac</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k9s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ubuntu</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k9s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其他环境后续再补充</p><h5 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h5><p>命令行直接执行<code>k9s</code>就可以打开所有pod视图, 如果需要指定配置文件可以使用<code>k9s --kubeconfig &lt;path&gt;</code>指定配置文件 <img src="'+l+`" alt="截图"> 命令说明</p><ul><li>0 : 所有pod</li><li>1 : default命名空间</li><li>&lt;ctrl-d&gt; : 删除pod</li><li>d : 进入描述</li><li>l : 查看log</li><li>s : 进入shell</li><li>&lt;shift-f&gt; : 端口转发</li><li>y : 打开配置文件</li></ul><h3 id="lens" tabindex="-1">Lens <a class="header-anchor" href="#lens" aria-label="Permalink to &quot;Lens&quot;">​</a></h3><p>Lens 是为那些每天使用 Kubernetes 的人设计的 IDE。它可以探索和导航 Kubernetes 集群，而无需学习 kubectl 命令，实时检查实时统计信息、事件和日志流。 它将所有集群、服务、工作负载、工具、自动化和相关资源整合在一起，以便于访问。Lens 与 Prometheus 集成，可视化并查看资源使用指标的趋势，包括 CPU、内存、网络和磁盘，以及总容量、实际使用情况、请求和限制。每个 k8s 资源都会自动生成详细的可视化信息。 Lens 带有 Helm 图表管理，允许发现和快速部署数千个公开可用的 Helm 图表并管理自己的存储库。浏览已安装的 Helm 图表及其修订版，只需单击一下即可升级。 Lens 是适用于 MacOS、Windows 和 Linux 操作系统的独立应用程序。</p><p>跳转：<a href="https://github.com/lensapp/lens" target="_blank" rel="noreferrer">lens github</a></p><h3 id="kuboard" tabindex="-1">Kuboard <a class="header-anchor" href="#kuboard" aria-label="Permalink to &quot;Kuboard&quot;">​</a></h3><p>Kuboard，是一款免费的 Kubernetes 图形化管理工具，Kuboard 力图帮助用户快速在 Kubernetes 上落地微服务。</p><h4 id="使用-1" tabindex="-1">使用 <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p>kuboard 现在有两个版本v2和v3， 我之前主要用的v2版本（使用的时候v3还没有出来），安装简单，基本上一个命令可以安装完成。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://kuboard.cn/install-script/kuboard.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://addons.kuboard.cn/metrics-server/0.3.7/metrics-server.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>获取token</p><h4 id="管理员用户" tabindex="-1"><strong>管理员用户</strong> <a class="header-anchor" href="#管理员用户" aria-label="Permalink to &quot;**管理员用户**&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo $(kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep ^kuboard-user | awk &#39;{print $1}&#39;) -o go-template=&#39;{{.data.token}}&#39; | base64 -d)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="只读用户" tabindex="-1"><strong>只读用户</strong> <a class="header-anchor" href="#只读用户" aria-label="Permalink to &quot;**只读用户**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ^kuboard-viewer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> awk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go-template=&#39;{{.data.token}}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="访问kuboard" tabindex="-1">访问Kuboard <a class="header-anchor" href="#访问kuboard" aria-label="Permalink to &quot;访问Kuboard&quot;">​</a></h4><p>Kuboard Service 使用了 NodePort 的方式暴露服务，NodePort 为 32567；您可以按如下方式访问 Kuboard。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://任意一个Worker节点的IP地址:32567/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="kubespare" tabindex="-1">KubeSpare <a class="header-anchor" href="#kubespare" aria-label="Permalink to &quot;KubeSpare&quot;">​</a></h3><p>KubeSphere 是在 Kubernetes 之上构建的面向云原生应用的分布式操作系统，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流。它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用 (plug-and-play) 的集成。</p><p>KubeSpare也是提供了一种web管理界面，在页面上可以完成大多数kubectl的操作，提供一种可视化的操作界面，这个我也是最近刚用，和kuboard主要功能差不多。</p><p>网站跳转： <a href="https://kubesphere.io/zh/" target="_blank" rel="noreferrer">kubespare官网</a></p>`,42),r=[n];function d(o,p,h,k,c,b){return a(),s("div",null,r)}const m=e(t,[["render",d]]);export{g as __pageData,m as default};
